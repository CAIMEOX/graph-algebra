package CAIMEOX/graph-algebra

// Values
fn biclique[A : Graph, V : Vertex](Array[V], Array[V]) -> A

fn clique[A : Graph, V : Vertex](Array[V]) -> A

fn connects[A : Graph, V : Vertex](Array[V]) -> A

fn edge[A : Graph, V : Vertex](V, V) -> A

fn edges[A : Graph, V : Vertex](Array[(V, V)]) -> A

fn is_subgraph[A : Graph + Eq](A, A) -> Bool

fn path[A : Graph, V : Vertex](Array[V]) -> A

fn singleton[A : Graph, V : Vertex](V) -> A

fn star[A : Graph, V : Vertex](V, Array[V]) -> A

fn vertices[A : Graph, V : Vertex](Array[V]) -> A

// Types and methods
type GraphFunctor
impl GraphFunctor {
  graph_map[G : Graph, V : Vertex, W : Vertex](Self[G, V, W], (V) -> W) -> G
}
impl[W : Vertex, V : Vertex, G : Graph] Graph for GraphFunctor[G, V, W]

type GraphMonad
impl GraphMonad {
  bind[G : Graph, V : Vertex](Self[G, V], (V) -> G) -> G
  induce[G : Graph, V : Vertex](Self[G, V], (V) -> Bool) -> G
  remove_vertex[G : Graph, V : Vertex + Eq](Self[G, V], V) -> G
}
impl[V : Vertex, G : Graph] Graph for GraphMonad[G, V]

type IntVertex

type StringVertex

type ToList

type UnitVertex

pub type VertRep Error
impl Vertex for VertRep

// Type aliases

// Traits
pub(open) trait Graph {
  empty() -> Self
  vertex(VertRep) -> Self
  overlay(Self, Self) -> Self
  connect(Self, Self) -> Self
}

pub trait Vertex {
  extract(VertRep) -> Self
  rep(Self) -> VertRep
}
impl Vertex for Unit
impl Vertex for Int
impl Vertex for String

